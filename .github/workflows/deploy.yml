name: Deploy to WAS Server via Bastion host

on:
  push:
    branches: [ "deploy" ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: Deploy # environment secret 사용을 위한 설정
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Override application.yml with environment secrets
      run: echo "${{ secrets.APPLICATION }}" > src/main/resources/application.yml

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: build/libs/


  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: Deploy # environment secret 사용을 위한 설정

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifact

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: |
          ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Transfer file to Bastion Host
      run: |
        ls  /home/runner/work/issue-tracker/issue-tracker/build/libs
        scp -i ${{ secrets.SSH_PRIVATE_KEY }} /home/runner/work/issue-tracker/issue-tracker/build/libs/issue-tracker-0.0.1-SNAPSHOT.jar ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST_IP }}:/home/${{ secrets.BASTION_USER }}/deploy

    - name: Transfer file to WAS Server
      run: |
        ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST_IP }} \
        "scp-i ${{ secrets.WAS_SSH_KEY }} /home/${{ secrets.BASTION_USER }}/deploy/issue-tracker-0.0.1-SNAPSHOT.jar ${{ secrets.WAS_USER }}@${{ secrets.WAS_HOST_IP }}:/home/${{ secrets.WAS_USER }}/deploy/issue-tracker-0.0.1-SNAPSHOT.jar"

    - name: Start application on WAS Server
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST_IP }} \
        "ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.WAS_USER }}@${{ secrets.WAS_HOST_IP }} << 'INNER_EOF'
        echo '>>>> ☠️ 기존 프로세스를 kill 합니다'
        CURRENT_PID=\$(pgrep -f gist-competition)
        echo '>>>> 🎯 목표: 현재 프로세스인 \$CURRENT_PID'
        if [ -z \$CURRENT_PID ]; then
            echo '>>>> 🤔 지금 돌아가는 프로세스 없습니다'
        else
            echo '>>>> 🔪 \$CURRENT_PID를 죽이겠습니다'
            kill -9 \$CURRENT_PID
            sleep 3  # 프로세스가 완전히 종료될 시간을 줌
        fi
        echo '>>>> 🚀 새로운 애플리케이션 배포합니다'

        cd /home/ubuntu/deploy
        JAR_NAME=\$(ls | grep 'gist-competition' | tail -n 1)
        
        echo '>>>> 🚀 프로젝트 실행- JAR name: \$JAR_NAME'
        nohup java -jar -Duser.timezone=Asia/Seoul \$JAR_NAME 1>nohup/stdout.txt 2>nohup/stderr.txt &
        sleep 2  # 애플리케이션이 안정적으로 시작될 시간을 줌
        INNER_EOF
        EOF
